/**
 * ESLint naming convention rules for TypeScript projects
 *
 * Defines naming patterns for:
 * - Default identifiers (camelCase)
 * - Variables (camelCase, UPPER_CASE, PascalCase for providers)
 * - Parameters (camelCase with optional leading underscore)
 * - Private members (camelCase)
 * - Enum members (UPPER_CASE)
 * - Types (PascalCase)
 * - Quoted properties (any format)
 */
export declare const namingConventions: ["error", {
    readonly selector: "default";
    readonly format: readonly ["camelCase"];
}, {
    readonly selector: "variable";
    readonly format: readonly ["camelCase", "UPPER_CASE"];
}, {
    readonly selector: "variable";
    readonly format: readonly ["PascalCase"];
    readonly filter: {
        readonly regex: "^.*Provider$";
        readonly match: true;
    };
}, {
    readonly selector: "parameter";
    readonly format: readonly ["camelCase"];
    readonly leadingUnderscore: "allow";
}, {
    readonly selector: "memberLike";
    readonly modifiers: readonly ["private"];
    readonly format: readonly ["camelCase"];
}, {
    readonly selector: "enumMember";
    readonly format: readonly ["UPPER_CASE"];
}, {
    readonly selector: readonly ["classProperty", "objectLiteralProperty", "typeProperty", "classMethod", "objectLiteralMethod", "typeMethod", "accessor", "enumMember"];
    readonly format: null;
    readonly modifiers: readonly ["requiresQuotes"];
}, {
    readonly selector: "typeLike";
    readonly format: readonly ["PascalCase"];
}];
declare const combinedConfig: import("@typescript-eslint/utils/ts-eslint").FlatConfig.ConfigArray;
/**
 * Combined ESLint configuration for TypeScript projects
 * Includes:
 * - ESLint recommended rules
 * - TypeScript-ESLint recommended rules with type checking
 * - Custom TypeScript rules
 * - Jest-specific rule overrides
 * - React component naming conventions
 * - Import organization rules
 * - Global ignores for build artifacts and dependencies
 * - Parser configuration
 * - Prettier integration
 *
 * @group configs
 * @example
 * import tsBaseConfig from '@map-colonies/eslint-config/ts-base';
 * import { config } from '@map-colonies/eslint-config/helpers';
 *
 * export default config(tsBaseConfig);
 */
export default combinedConfig;
